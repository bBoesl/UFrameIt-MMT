namespace http://BenniDoes.Stuff/ ❚
import mitm http://mathhub.info/MitM/Foundation ❚
import arith http://mathhub.info/MitM/core/arithmetics ❚
import algebra http://mathhub.info/MitM/core/algebra ❚


theory standartMathStuff :  http://mathhub.info/MitM/Foundation?Math =
    include ☞arith:?RealArithmetics ❙
    Pi : ℝ ❘ # π ❙
    cos: ℝ ⟶ ℝ ❘# cos 1❙
    arccos: ℝ ⟶ ℝ ❘ # arccos 1❙
    tan: ℝ ⟶ ℝ ❘ # tan 1 ❙
    arctan: ℝ ⟶ ℝ ❘ # arctan 1 ❙
❚



theory Vector : http://mathhub.info/MitM/Foundation?Math =
    include ☞arith:?RealArithmetics ❙
    include ?standartMathStuff ❙
    // include ☞algebra:?RealVectorspace ❙

     vector: type ❘ # V ❙
     // vector: type ❘ = realVec3.universe❘ # V ❙ // works but is slow as sloth ❙
    vectorOf: ℝ ⟶ ℝ ⟶ ℝ ⟶ V ❘ # Vof 1 2 3 ❙
    OV : V ❙
    v_1: V ⟶ ℝ ❘ # _x  1 prec 50 ❙
    v_1_rule : {x: ℝ ,y: ℝ,z: ℝ} ⊦ v_1 ( Vof x y z ) ≐ x ❘role ForwardRule ❙
    v_2: V ⟶ ℝ ❘ # _y  1 prec 50 ❙
    v_2_rule : {x: ℝ ,y: ℝ,z: ℝ} ⊦ v_2 ( Vof x y z ) ≐ y ❘role ForwardRule ❙
    v_3: V ⟶ ℝ ❘ # _z  1 prec 50 ❙
    v_3_rule : {x: ℝ ,y: ℝ,z: ℝ} ⊦ v_3 ( Vof  x y z )≐ z ❘role ForwardRule ❙

     vec_add: V ⟶ V ⟶ V ❘ = [v, w]  Vof ( ( _x v )  + ( _x w ) ) ( ( _y v ) + ( _y w ) ) ( ( _z v )  + ( _z w ) ) ❘ # 1 ⁺ 2 ❙ // jsuperplus ❙
    // vec_add = realVec3.op  ❘ # 1 ⁺ 2 ❙
    vec_sub: V ⟶ V ⟶ V ❘ = [v, w]  Vof ( ( _x v )  - ( _x w ) ) ( ( _y v ) - ( _y w ) ) ( ( _z v )  - ( _z w ) ) ❘ # 1 ⁻ 2 ❙ // jsuperminus  ❙
    vec_mult: ℝ ⟶ V  ⟶ V ❘ = [a, v] Vof ( a ⋅ _x v ) (a ⋅ _y v) ( a ⋅ _z v)❘ # 1 ** 2❙
    scalarproduct: V ⟶ V ⟶ ℝ ❘ = [v,w] ( _x v) ⋅ ( _x w) + ( _y v) ⋅ ( _y w) + ( _z v) ⋅ ( _z w) ❘ # < 1 , 2 > ❙
    norm: V ⟶ ℝ  ❘ = [v] √ <v,v> ❘ # n 1 ❙
    normalize: V ⟶ V ❘ = [v] 1 / (n v) ** v ❘ # norm 1 ❙
    vec_cross : V ⟶ V ⟶ V ❘ = [v, w ] Vof ( _y v  ⋅ _z w  - _z v ⋅ _y w ) ( _z v  ⋅ _x w  - _x v ⋅ _z w ) ( _x v  ⋅ _y w  - _y v ⋅ _x w ) ❘ # 1 Vcross  2  ❙
    metric: V ⟶ V ⟶ ℝ ❘= [v,w] n (w ⁻ v) ❘ # d 1 2   ❙
    angle: V ⟶ V ⟶ ℝ ❘ = [v,w] arccos ( < v,w > / ((n v) ⋅ (n w))) ❘ # ≺ 1 2 ❙ // jprec ❙
    angle_between: V ⟶ V ⟶ V ⟶ ℝ ❘ = [x,y,z] ≺ (x ⁻ y) (z ⁻ y) ❘ # angleBetween 1 2 3 ❙
    parallel: V ⟶ V ⟶ bool ❘ = [v,w] ((≺ v w)  ≐ 0) ∨ ((≺ v w)  ≐ π) ❘ # 1 ∥ 2 ❙
    orthogonal: V ⟶ V ⟶ bool ❘ = [v,w] < v ,w > ≐ 0 ❘ # 1 ⊥⊥ 2   ❙ //  jbot ❙
    rightangle: ℝ ⟶ bool ❘ = [x] x ≐ π / 2  ❘ # ✓ 1❙ //  jcheck ❙
❚